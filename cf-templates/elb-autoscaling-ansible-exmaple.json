{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template Autoscaling with Ansible-Pull",
  "Parameters": {
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "AnsiblePlaybook": {
      "Description": "Ansible Playbook to run on startup.",
      "Default": "site.yml",
      "Type": "String"
    },
    "AnsibleHost": {
      "Description": "Ansible Host declaration.",
      "Default": "webserver",
      "Type": "String"
    },
    "AnsibleBranch": {
      "Description": "Ansible branch to use",
      "Default": "master",
      "Type": "String"
    },
    "GitRepo": {
      "Description": "Path to the .git repo to check out",
      "Default": "https://github.com/ansible/ansible-examples.git",
      "Type": "String"
    },
    "WebServerPort": {
      "Description": "TCP/IP port of the web server",
      "Type": "String",
      "Default": "8080"
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "64"
      },
      "m1.small": {
        "Arch": "64"
      },
      "m3.medium": {
        "Arch": "64"
      },
      "m3.large": {
        "Arch": "64"
      },
      "m3.xlarge": {
        "Arch": "64"
      },
      "m2.xlarge": {
        "Arch": "64"
      },
      "m2.2xlarge": {
        "Arch": "64"
      },
      "m2.4xlarge": {
        "Arch": "64"
      },
      "m3.xlarge": {
        "Arch": "64"
      },
      "m3.2xlarge": {
        "Arch": "64"
      },
      "c1.medium": {
        "Arch": "64"
      },
      "c1.xlarge": {
        "Arch": "64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "32": "ami-54807d3c",
        "64": "ami-7c807d14"
      },
      "us-west-1": {
        "32": "ami-a8d3d4ed",
        "64": "ami-aed3d4eb"
      },
      "us-west-2": {
        "32": "ami-1b3b462b",
        "64": "ami-6d3b465d"
      },
      "eu-west-1": {
        "32": "ami-672ce210",
        "64": "ami-652ce212"
      },
      "sa-east-1": {
        "32": "ami-c7e649da",
        "64": "ami-fde649e0"
      },
      "ap-southeast-1": {
        "32": "ami-56b7eb04",
        "64": "ami-50b7eb02"
      },
      "ap-southeast-2": {
        "32": "ami-6bf99c51",
        "64": "ami-61f99c5b"
      },
      "ap-northeast-1": {
        "32": "ami-25dd9324",
        "64": "ami-21dd9320"
      }
    }
  },
  "Resources": {
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "1",
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment1": "cfn-init install ansible and git for ansible pull",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "ansible": [],
                "git" : []
              }
            },
            "files": {
              "/etc/ansible/hosts": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[",
                      {
                        "Ref": "AnsibleHost"
                      },
                      "]\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "sed -i 's/enabled=0/enabled=1/g' /etc/yum.repos.d/epel.repo\n",
                "sed -i 's/gpgcheck=1/gpgcheck=0/g' /etc/yum.repos.d/epel.repo\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r LaunchConfig ",
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "ssh-keyscan github.com >> /etc/ssh/ssh_known_hosts\n",
                "curl -s 169.254.169.254/latest/meta-data/hostname >> /etc/ansible/hosts\n",
                "ansible-pull ",
                {
                  "Ref": "AnsiblePlaybook"
                },
                " -C ",
                {
                  "Ref": "AnsibleBranch"
                },
                " -d /var/lib/playbooks/ -U ",
                {
                  "Ref": "GitRepo"
                },
                " &>>  /var/log/ansible-run.log\n",
                "/opt/aws/bin/cfn-signal",
                " -e $?",
                " '",
                {
                  "Ref": "WaitHandle"
                },
                "'",
                "\n",
                "echo Cloud-Init run at $(date) > /dev/console\n"
              ]
            ]
          }
        }
      }
    },
      "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "LaunchConfig",
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "1500"
      }
    },

    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": {
              "Ref": "WebServerPort"
            },
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                {
                  "Ref": "WebServerPort"
                },
                "/"
              ]
            ]
          },
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": {
              "Ref": "WebServerPort"
            },
            "ToPort": {
              "Ref": "WebServerPort"
            },
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          }

        ]
      }
    }
  },
  "Outputs": {
    "URL": {
      "Description": "URL of the website",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    }
  }
}
